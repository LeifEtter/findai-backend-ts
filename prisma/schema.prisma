generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  Tool Tool[]
}

model Environment {
  id   Int    @id @default(autoincrement())
  name String
  Tool Tool[]
}

model Feedback {
  id           Int      @id @default(autoincrement())
  name         String
  reason       String
  reviewed     Boolean
  creationDate DateTime @default(now())
}

model Log {
  id           Int        @id @default(autoincrement())
  action       Log_action
  event        String
  message      Json
  userId       Int
  creationDate DateTime   @default(now())
  User         User       @relation(fields: [userId], references: [id])

  @@index([userId], map: "Log_userId_fkey")
}

model Tool {
  id           Int           @id @default(autoincrement())
  preUpVote    Int           @default(0)
  approval     Boolean       @default(true)
  priceModel   String        @default("FREE VERSION")
  price        Float         @default(0)
  toolUrl      String        @unique
  toolName     String        @unique
  description  String        @db.Text
  icon         String?
  image        String?
  synced       Boolean       @default(true)
  ToolUpvote   ToolUpvote[]
  Review       Review[]
  Category     Category[]
  Environment  Environment[]
  Tag          Tag[]
  bookmarkedBy User[]        @relation("userBookmarks")
  creator      User          @relation(fields: [creatorId], references: [id])
  creatorId    Int
  creationDate DateTime      @default(now())
  updatedAt    DateTime      @default(now())

  @@index([creatorId], map: "Tool_creatorId_fkey")
}

model ToolUpvote {
  id           Int      @id @default(autoincrement())
  upvoterId    Int
  ToolId       Int?
  creationDate DateTime @default(now())
  Tool         Tool?    @relation(fields: [ToolId], references: [id])
  User         User     @relation(fields: [upvoterId], references: [id])

  @@index([ToolId], map: "ToolUpvote_ToolId_fkey")
  @@index([upvoterId], map: "ToolUpvote_upvoterId_fkey")
}

model Review {
  id        Int  @id @default(autoincrement())
  review    Json
  creatorId Int
  toolId    Int
  User      User @relation(fields: [creatorId], references: [id])
  Tool      Tool @relation(fields: [toolId], references: [id])

  @@index([creatorId], map: "Review_creatorId_fkey")
  @@index([toolId], map: "Review_toolId_fkey")
}

model Tag {
  id           Int      @id @default(autoincrement())
  tagName      String   @unique
  creationDate DateTime @default(now())
  Tool         Tool[]
}

model User {
  id              Int          @id @default(autoincrement())
  email           String       @unique
  password        String
  name            String
  profileImage    String       @db.Text
  biography       String       @db.Text
  role            String
  softDelete      Boolean      @default(false)
  creationDate    DateTime     @default(now())
  lastUpdated     DateTime     @default(now())
  Log             Log[]
  tools           Tool[]
  ToolUpvote      ToolUpvote[]
  Review          Review[]
  bookmarkedTools Tool[]       @relation("userBookmarks")
}

enum Log_action {
  CREATE
  READ
  UPDATE
  DELETE
}
