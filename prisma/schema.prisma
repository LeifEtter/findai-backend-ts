generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  tools Tool[]
}

model Environment {
  id    Int    @id @default(autoincrement())
  name  String
  tools Tool[]
}

model Feedback {
  id           Int      @id @default(autoincrement())
  name         String
  reason       String
  reviewed     Boolean
  creationDate DateTime @default(now())
}

model Log {
  id           Int        @id @default(autoincrement())
  action       Log_action
  event        String
  message      Json
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  creationDate DateTime   @default(now())

  @@index([userId], map: "Log_userId_fkey")
}

model Tool {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  url          String        @unique
  description  String        @db.Text
  icon         String?
  image        String?
  preUpVote    Int           @default(0)
  approval     Boolean       @default(true)
  priceModel   String        @default("FREE VERSION")
  price        Float         @default(0)
  synced       Boolean       @default(true)
  upvotes      ToolUpvote[]
  reviews      Review[]
  categories   Category[]
  environments Environment[]
  tags         Tag[]
  bookmarkedBy User[]        @relation("userBookmarks")
  creator      User          @relation(fields: [creatorId], references: [id])
  creatorId    Int
  creationDate DateTime      @default(now())
  updatedAt    DateTime      @default(now())

  @@index([creatorId], map: "Tool_creatorId_fkey")
}

model ToolUpvote {
  id           Int      @id @default(autoincrement())
  userId       Int
  toolId       Int?
  creationDate DateTime @default(now())
  tool         Tool?    @relation(fields: [toolId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@index([toolId], map: "ToolUpvote_toolId_fkey")
  @@index([userId], map: "ToolUpvote_upvoterId_fkey")
}

model Review {
  id        Int  @id @default(autoincrement())
  content   Json
  creatorId Int
  toolId    Int
  user      User @relation(fields: [creatorId], references: [id])
  tool      Tool @relation(fields: [toolId], references: [id])

  @@index([creatorId], map: "Review_creatorId_fkey")
  @@index([toolId], map: "Review_toolId_fkey")
}

model Tag {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  tools        Tool[]
  creationDate DateTime @default(now())
}

model User {
  id               Int          @id @default(autoincrement())
  email            String       @unique
  password         String
  name             String
  profileImage     String?      @db.Text
  biography        String?      @db.Text
  role             Role
  softDelete       Boolean      @default(false)
  creationDate     DateTime     @default(now())
  lastUpdated      DateTime     @default(now())
  logs             Log[]
  tools            Tool[]
  upvotes          ToolUpvote[]
  reviews          Review[]
  bookmarkedTools  Tool[]       @relation("userBookmarks")
  verificationCode Int?
  verified         Boolean      @default(false)
}

enum Log_action {
  CREATE
  READ
  UPDATE
  DELETE
}

enum Role {
  USER
  ADMIN
}
