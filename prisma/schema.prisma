generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id             Int              @id @default(autoincrement())
  categoryName   String           @unique
  creationDate   DateTime         @default(now())
  Recommendation Recommendation[]
}

model Environment {
  id             Int              @id @default(autoincrement())
  name           String
  Recommendation Recommendation[]
}

model Feedback {
  id           Int      @id @default(autoincrement())
  name         String
  reason       String
  reviewed     Boolean
  creationDate DateTime @default(now())
}

model Log {
  id           Int        @id @default(autoincrement())
  action       Log_action
  event        String
  message      Json
  userId       Int
  creationDate DateTime   @default(now())
  User         User       @relation(fields: [userId], references: [id])

  @@index([userId], map: "Log_userId_fkey")
}

model Recommendation {
  id                                  Int                    @id @default(autoincrement())
  preUpVote                           Int                    @default(0)
  approval                            Boolean                @default(true)
  priceModel                          String                 @default("FREE VERSION")
  price                               Float                  @default(0)
  toolUrl                             String                 @unique
  toolName                            String                 @unique
  description                         String                 @db.Text
  icon                                String?
  image                               String?
  creatorId                           Int
  creationDate                        DateTime               @default(now())
  updateDate                          DateTime               @default(now())
  synced                              Boolean                @default(true)
  User_Recommendation_creatorIdToUser User                   @relation("Recommendation_creatorIdToUser", fields: [creatorId], references: [id])
  RecommendationUpvote                RecommendationUpvote[]
  Review                              Review[]
  Category                            Category[]
  Environment                         Environment[]
  Tag                                 Tag[]
  User_userBookmarks                  User[]                 @relation("userBookmarks")

  @@index([creatorId], map: "Recommendation_creatorId_fkey")
}

model RecommendationUpvote {
  id               Int             @id @default(autoincrement())
  upvoterId        Int
  recommendationId Int?
  creationDate     DateTime        @default(now())
  Recommendation   Recommendation? @relation(fields: [recommendationId], references: [id])
  User             User            @relation(fields: [upvoterId], references: [id])

  @@index([recommendationId], map: "RecommendationUpvote_recommendationId_fkey")
  @@index([upvoterId], map: "RecommendationUpvote_upvoterId_fkey")
}

model Review {
  id             Int            @id @default(autoincrement())
  review         Json
  creatorId      Int
  toolId         Int
  User           User           @relation(fields: [creatorId], references: [id])
  Recommendation Recommendation @relation(fields: [toolId], references: [id])

  @@index([creatorId], map: "Review_creatorId_fkey")
  @@index([toolId], map: "Review_toolId_fkey")
}

model Tag {
  id             Int              @id @default(autoincrement())
  tagName        String           @unique
  creationDate   DateTime         @default(now())
  Recommendation Recommendation[]
}

model User {
  id                                            Int                    @id @default(autoincrement())
  email                                         String                 @unique
  password                                      String
  name                                          String
  profileImage                                  String                 @db.Text
  biography                                     String                 @db.Text
  role                                          String
  softDelete                                    Boolean                @default(false)
  creationDate                                  DateTime               @default(now())
  lastUpdated                                   DateTime               @default(now())
  Log                                           Log[]
  Recommendation_Recommendation_creatorIdToUser Recommendation[]       @relation("Recommendation_creatorIdToUser")
  RecommendationUpvote                          RecommendationUpvote[]
  Review                                        Review[]
  Recommendation_userBookmarks                  Recommendation[]       @relation("userBookmarks")
}

enum Log_action {
  CREATE
  READ
  UPDATE
  DELETE
}
